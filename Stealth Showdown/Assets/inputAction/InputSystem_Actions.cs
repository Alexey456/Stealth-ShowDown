//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/inputAction/InputSystem_Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerinputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerinputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem_Actions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""3d1b88b8-6464-417f-b4c7-7909d2f0198e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""3915f0d6-103e-4d04-9fa0-8ced65263b40"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""3bb6e9b9-5fa9-4d2d-aa71-d34772d6c20c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d1f558bd-4bd6-441d-9b69-1dd6cdd82a18"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2bb9a396-841c-43d2-bd74-f8d52d763cd8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""db2e2f36-4c02-414f-a235-1f7f23f52dd4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""26b4b658-6e55-490b-8519-971d0bf7bff5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""ActionsBtn"",
            ""id"": ""daad14bf-8c99-4673-a74b-a52959136b09"",
            ""actions"": [
                {
                    ""name"": ""BtnMouse"",
                    ""type"": ""Button"",
                    ""id"": ""1123a9ec-b73e-49d9-a8c0-7f2466ac2f2e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4d6320a0-ba80-40eb-b06d-00b50a67f323"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BtnMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SwitchBtn"",
            ""id"": ""1139547c-5148-4595-a61e-9e1e7ea85ddb"",
            ""actions"": [
                {
                    ""name"": ""BtnSwitchItem"",
                    ""type"": ""Value"",
                    ""id"": ""4f4e85a7-da98-4955-9700-057512f0c681"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5ffe47c7-75f7-4984-a9e9-b4046372a3a3"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BtnSwitchItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86d4e4e5-c8fc-4620-a7db-8d21cf56ee32"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BtnSwitchItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea786c6e-ddb8-477f-a085-58d33dfab551"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BtnSwitchItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        // ActionsBtn
        m_ActionsBtn = asset.FindActionMap("ActionsBtn", throwIfNotFound: true);
        m_ActionsBtn_BtnMouse = m_ActionsBtn.FindAction("BtnMouse", throwIfNotFound: true);
        // SwitchBtn
        m_SwitchBtn = asset.FindActionMap("SwitchBtn", throwIfNotFound: true);
        m_SwitchBtn_BtnSwitchItem = m_SwitchBtn.FindAction("BtnSwitchItem", throwIfNotFound: true);
    }

    ~@PlayerinputActions()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, PlayerinputActions.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_ActionsBtn.enabled, "This will cause a leak and performance issues, PlayerinputActions.ActionsBtn.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_SwitchBtn.enabled, "This will cause a leak and performance issues, PlayerinputActions.SwitchBtn.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    public struct PlayerActions
    {
        private @PlayerinputActions m_Wrapper;
        public PlayerActions(@PlayerinputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // ActionsBtn
    private readonly InputActionMap m_ActionsBtn;
    private List<IActionsBtnActions> m_ActionsBtnActionsCallbackInterfaces = new List<IActionsBtnActions>();
    private readonly InputAction m_ActionsBtn_BtnMouse;
    public struct ActionsBtnActions
    {
        private @PlayerinputActions m_Wrapper;
        public ActionsBtnActions(@PlayerinputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @BtnMouse => m_Wrapper.m_ActionsBtn_BtnMouse;
        public InputActionMap Get() { return m_Wrapper.m_ActionsBtn; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsBtnActions set) { return set.Get(); }
        public void AddCallbacks(IActionsBtnActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionsBtnActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionsBtnActionsCallbackInterfaces.Add(instance);
            @BtnMouse.started += instance.OnBtnMouse;
            @BtnMouse.performed += instance.OnBtnMouse;
            @BtnMouse.canceled += instance.OnBtnMouse;
        }

        private void UnregisterCallbacks(IActionsBtnActions instance)
        {
            @BtnMouse.started -= instance.OnBtnMouse;
            @BtnMouse.performed -= instance.OnBtnMouse;
            @BtnMouse.canceled -= instance.OnBtnMouse;
        }

        public void RemoveCallbacks(IActionsBtnActions instance)
        {
            if (m_Wrapper.m_ActionsBtnActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionsBtnActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionsBtnActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionsBtnActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionsBtnActions @ActionsBtn => new ActionsBtnActions(this);

    // SwitchBtn
    private readonly InputActionMap m_SwitchBtn;
    private List<ISwitchBtnActions> m_SwitchBtnActionsCallbackInterfaces = new List<ISwitchBtnActions>();
    private readonly InputAction m_SwitchBtn_BtnSwitchItem;
    public struct SwitchBtnActions
    {
        private @PlayerinputActions m_Wrapper;
        public SwitchBtnActions(@PlayerinputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @BtnSwitchItem => m_Wrapper.m_SwitchBtn_BtnSwitchItem;
        public InputActionMap Get() { return m_Wrapper.m_SwitchBtn; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwitchBtnActions set) { return set.Get(); }
        public void AddCallbacks(ISwitchBtnActions instance)
        {
            if (instance == null || m_Wrapper.m_SwitchBtnActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SwitchBtnActionsCallbackInterfaces.Add(instance);
            @BtnSwitchItem.started += instance.OnBtnSwitchItem;
            @BtnSwitchItem.performed += instance.OnBtnSwitchItem;
            @BtnSwitchItem.canceled += instance.OnBtnSwitchItem;
        }

        private void UnregisterCallbacks(ISwitchBtnActions instance)
        {
            @BtnSwitchItem.started -= instance.OnBtnSwitchItem;
            @BtnSwitchItem.performed -= instance.OnBtnSwitchItem;
            @BtnSwitchItem.canceled -= instance.OnBtnSwitchItem;
        }

        public void RemoveCallbacks(ISwitchBtnActions instance)
        {
            if (m_Wrapper.m_SwitchBtnActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISwitchBtnActions instance)
        {
            foreach (var item in m_Wrapper.m_SwitchBtnActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SwitchBtnActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SwitchBtnActions @SwitchBtn => new SwitchBtnActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IActionsBtnActions
    {
        void OnBtnMouse(InputAction.CallbackContext context);
    }
    public interface ISwitchBtnActions
    {
        void OnBtnSwitchItem(InputAction.CallbackContext context);
    }
}
